/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrames;

import Datos.Conexion;
import static JFrames.LoginAdmin.txtusuario;
import Paneles.panelInicio;
import Paneles.panelVendedores;
import encriptacion.Encode;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Los Pibes
 */
public class RegistroAdministradores extends javax.swing.JFrame {

    log lo = new log();
    final Calendar calendar = Calendar.getInstance();
    final java.util.Date date = calendar.getTime();
    String fecha = new SimpleDateFormat("yyyyMMdd-hh.mm.ss").format(date);

    /**
     * Creates new form RegistroAdministradores
     */
    public RegistroAdministradores() {
        initComponents();
        if ("adminlectura".equals(txtusuario.getText())) {
            btnNuevo.setEnabled(false);
            tablaUsuarios.setEnabled(false);
        }
        setBackground(new Color(0, 0, 0, 0));
        cargarData();
        anchoColumnas();
        bloquear();

        lbUsuarioX.setVisible(false);
        lbContraseñaX.setVisible(false);
        TextPrompt id = new TextPrompt("ID", txtIDUsuario);
        TextPrompt usuario = new TextPrompt("USUARIO", txtUsuario);
        TextPrompt contraseña = new TextPrompt("CONTRASEÑA", txtContraseña);
        txtIDUsuario.setEnabled(false);
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("imagenes/cinematixLogo.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        modificarUsuario = new javax.swing.JMenuItem();
        btnRegresar = new javax.swing.JLabel();
        txtIDUsuario = new javax.swing.JTextField();
        txtUsuario = new javax.swing.JTextField();
        txtContraseña = new javax.swing.JTextField();
        lbX = new javax.swing.JLabel();
        btnNuevo = new rojeru_san.complementos.RSButtonHover();
        btnActualizar = new rojeru_san.complementos.RSButtonHover();
        btnDeshabilitar = new rojeru_san.complementos.RSButtonHover();
        btnGuardar = new rojeru_san.complementos.RSButtonHover();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        lbUsuarioX = new javax.swing.JLabel();
        lbContraseñaX = new javax.swing.JLabel();
        btnReporte = new rojerusan.RSButtonHover();
        lbFondo = new javax.swing.JLabel();

        modificarUsuario.setText("Modificar");
        modificarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarUsuarioActionPerformed(evt);
            }
        });
        jPopupMenu1.add(modificarUsuario);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegresarMouseClicked(evt);
            }
        });
        getContentPane().add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 30, 30));

        txtIDUsuario.setFont(new java.awt.Font("Garamond", 1, 16)); // NOI18N
        txtIDUsuario.setForeground(new java.awt.Color(255, 255, 255));
        txtIDUsuario.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIDUsuario.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtIDUsuario.setCaretColor(new java.awt.Color(255, 255, 255));
        txtIDUsuario.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtIDUsuario.setOpaque(false);
        txtIDUsuario.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtIDUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 50, 40));

        txtUsuario.setFont(new java.awt.Font("Garamond", 1, 16)); // NOI18N
        txtUsuario.setForeground(new java.awt.Color(255, 255, 255));
        txtUsuario.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtUsuario.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtUsuario.setCaretColor(new java.awt.Color(255, 255, 255));
        txtUsuario.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtUsuario.setOpaque(false);
        txtUsuario.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        txtUsuario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUsuarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUsuarioFocusLost(evt);
            }
        });
        getContentPane().add(txtUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 170, 220, 40));

        txtContraseña.setFont(new java.awt.Font("Garamond", 1, 16)); // NOI18N
        txtContraseña.setForeground(new java.awt.Color(255, 255, 255));
        txtContraseña.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtContraseña.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtContraseña.setCaretColor(new java.awt.Color(255, 255, 255));
        txtContraseña.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtContraseña.setOpaque(false);
        txtContraseña.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        txtContraseña.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtContraseñaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtContraseñaFocusLost(evt);
            }
        });
        getContentPane().add(txtContraseña, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 240, 220, 40));
        getContentPane().add(lbX, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 170, -1, 40));

        btnNuevo.setBackground(new java.awt.Color(81, 81, 81));
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoNuevo.png"))); // NOI18N
        btnNuevo.setText("NUEVO");
        btnNuevo.setBorderPainted(false);
        btnNuevo.setColorHover(new java.awt.Color(61, 61, 61));
        btnNuevo.setFocusPainted(false);
        btnNuevo.setFont(new java.awt.Font("Garamond", 0, 11)); // NOI18N
        btnNuevo.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 330, 140, 40));

        btnActualizar.setBackground(new java.awt.Color(81, 81, 81));
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoActualizar.png"))); // NOI18N
        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.setBorderPainted(false);
        btnActualizar.setColorHover(new java.awt.Color(61, 61, 61));
        btnActualizar.setFocusPainted(false);
        btnActualizar.setFont(new java.awt.Font("Garamond", 0, 11)); // NOI18N
        btnActualizar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 390, 140, 40));

        btnDeshabilitar.setBackground(new java.awt.Color(81, 81, 81));
        btnDeshabilitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoDeshabilitar.png"))); // NOI18N
        btnDeshabilitar.setText("DESHABILITAR");
        btnDeshabilitar.setBorderPainted(false);
        btnDeshabilitar.setColorHover(new java.awt.Color(61, 61, 61));
        btnDeshabilitar.setFocusPainted(false);
        btnDeshabilitar.setFont(new java.awt.Font("Garamond", 0, 11)); // NOI18N
        btnDeshabilitar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnDeshabilitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeshabilitarActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeshabilitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 390, 140, 40));

        btnGuardar.setBackground(new java.awt.Color(81, 81, 81));
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoGuardar.png"))); // NOI18N
        btnGuardar.setText("GUARDAR");
        btnGuardar.setBorderPainted(false);
        btnGuardar.setColorHover(new java.awt.Color(61, 61, 61));
        btnGuardar.setFocusPainted(false);
        btnGuardar.setFont(new java.awt.Font("Garamond", 0, 11)); // NOI18N
        btnGuardar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 330, 140, 40));

        tablaUsuarios.setBackground(new java.awt.Color(61, 61, 61));
        tablaUsuarios.setFont(new java.awt.Font("Garamond", 1, 16)); // NOI18N
        tablaUsuarios.setForeground(new java.awt.Color(255, 255, 255));
        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaUsuarios.setAlignmentY(4.0F);
        tablaUsuarios.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablaUsuarios.setComponentPopupMenu(jPopupMenu1);
        tablaUsuarios.setFillsViewportHeight(true);
        tablaUsuarios.setOpaque(false);
        tablaUsuarios.setPreferredSize(new java.awt.Dimension(300, 60));
        tablaUsuarios.setRowHeight(25);
        tablaUsuarios.setSelectionBackground(new java.awt.Color(29, 29, 29));
        tablaUsuarios.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tablaUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaUsuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaUsuarios);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 90, 430, 340));

        lbUsuarioX.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoX.png"))); // NOI18N
        getContentPane().add(lbUsuarioX, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 170, 30, 40));

        lbContraseñaX.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoX.png"))); // NOI18N
        getContentPane().add(lbContraseñaX, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 240, 30, 40));

        btnReporte.setBackground(new java.awt.Color(81, 81, 81));
        btnReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoReporte.png"))); // NOI18N
        btnReporte.setBorderPainted(false);
        btnReporte.setColorHover(new java.awt.Color(61, 61, 61));
        btnReporte.setFocusable(false);
        btnReporte.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });
        getContentPane().add(btnReporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 30, 40, 35));

        lbFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/registroUsuarios.png"))); // NOI18N
        getContentPane().add(lbFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        for (double i = 0.0; i <= 1.0; i = i + 0.1) {
            String val = i + "";
            float f = Float.valueOf(val);
            this.setOpacity(f);
            try {
                Thread.sleep(50);
            } catch (Exception e) {
                lo.LogBitacora("Hubo un error al abrir la ventana" + e);
            }
        }
    }//GEN-LAST:event_formWindowOpened

    boolean guardar;

    void validarCamposVacios() {
        ImageIcon jPaneIcon = new ImageIcon("src/Iconos/iconoError.png");
        if (txtUsuario.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor rellene el campo usuario", "Error", JOptionPane.PLAIN_MESSAGE, jPaneIcon);
        } else if (txtContraseña.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor rellene el campo contraseña", "Error", JOptionPane.PLAIN_MESSAGE, jPaneIcon);
        } else if (lbUsuarioX.isVisible() || lbContraseñaX.isVisible()) {
            JOptionPane.showMessageDialog(null, "Debe corregir los errores para poder continuar", "Error", JOptionPane.PLAIN_MESSAGE, jPaneIcon);
        } else {
            guardar = true;
        }
    }

    void anchoColumnas() {
        TableColumnModel anchoColumnas = tablaUsuarios.getColumnModel();
        anchoColumnas.getColumn(0).setPreferredWidth(30);
        anchoColumnas.getColumn(1).setPreferredWidth(120);
        anchoColumnas.getColumn(2).setPreferredWidth(160);
        anchoColumnas.getColumn(3).setPreferredWidth(40);
    }

    void limpiarCajas() {
        txtIDUsuario.setText("");
        txtUsuario.setText("");
        txtContraseña.setText("");
        tablaUsuarios.clearSelection();
        txtUsuario.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
        txtContraseña.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
        lbUsuarioX.setVisible(false);
        lbContraseñaX.setVisible(false);
    }

    void bloquear() {
        txtUsuario.setEnabled(false);
        txtContraseña.setEnabled(false);
        btnGuardar.setEnabled(false);
        btnActualizar.setEnabled(false);
        btnDeshabilitar.setEnabled(false);
        tablaUsuarios.setEnabled(false);
    }

    void desbloquear() {
        txtUsuario.setEnabled(true);
        txtContraseña.setEnabled(true);
        btnGuardar.setEnabled(true);
        btnDeshabilitar.setEnabled(true);
        tablaUsuarios.setEnabled(true);
    }

    ResultSet rs;
    PreparedStatement Pst;
    DefaultTableModel model;
    Conexion cc = new Conexion();
    Connection cn = cc.GetConexion();

    void cargarData() {
        String[] titulos = {"ID", "Usuario", "Contraseña", "Intentos"};
        String[] registros = new String[4];
        String sql = "SELECT IDUsuario, Usuario, Contrasena, Intentos FROM usuarios WHERE IDUsuario != 0 ORDER BY IDUsuario";

        model = new DefaultTableModel(null, titulos);

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                registros[0] = rs.getString("IDUsuario");
                registros[1] = rs.getString("Usuario");
                registros[2] = rs.getString("Contrasena");
                registros[3] = rs.getString("Intentos");
                model.addRow(registros);
            }

            tablaUsuarios.setModel(model);
            anchoColumnas();
        } catch (SQLException ex) {
            Logger.getLogger(panelVendedores.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.getMessage());
        }
    }

    private void btnRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegresarMouseClicked
        if (!txtIDUsuario.getText().isEmpty() || !txtUsuario.getText().isEmpty() || !txtContraseña.getText().isEmpty()) {
            ImageIcon jPaneIcon = new ImageIcon("src/Iconos/iconoSalida.png");
            int salidaConfirmacion = JOptionPane.showConfirmDialog(null, "Al parecer tienes un proceso pendiente\n ¿Estás seguro que deseas salir?", "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, jPaneIcon);
            if (salidaConfirmacion == 0) {
                this.dispose();
                panelInicio.pantallaUsuarios = false;
            }
        } else {
            this.dispose();
            panelInicio.pantallaUsuarios = false;
        }
    }//GEN-LAST:event_btnRegresarMouseClicked

    private void tablaUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaUsuariosMouseClicked
        int fila = tablaUsuarios.getSelectedRow();
        if (fila >= 0) {
            btnDeshabilitar.setEnabled(true);
            String estado = tablaUsuarios.getValueAt(fila, 3).toString();

            if ("3".equals(estado)) {
                ImageIcon iconobtn = new ImageIcon("src/Iconos/iconoDeshabilitar.png");
                btnDeshabilitar.setIcon(iconobtn);
                btnDeshabilitar.setText("DESHABILITAR");
            } else if ("0".equals(estado)) {
                ImageIcon iconobtn = new ImageIcon("src/Iconos/iconoHabilitar.png");
                btnDeshabilitar.setIcon(iconobtn);
                btnDeshabilitar.setText("HABILITAR");
            }
        }
    }//GEN-LAST:event_tablaUsuariosMouseClicked

    private void btnDeshabilitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeshabilitarActionPerformed
        int fila = tablaUsuarios.getSelectedRow();
        String habilitado = "3";
        String deshabilitado = "0";

        if (fila >= 0) {
            String id = tablaUsuarios.getValueAt(fila, 0).toString();
            String usuario = tablaUsuarios.getValueAt(fila, 1).toString();

            if (btnDeshabilitar.getText().equals("CANCELAR")) {
                limpiarCajas();
                btnActualizar.setEnabled(false);
                btnNuevo.setEnabled(false);
                btnDeshabilitar.setEnabled(false);
                btnGuardar.setEnabled(true);

                ImageIcon iconobtn = new ImageIcon("src/Iconos/iconoDeshabilitar.png");
                btnDeshabilitar.setIcon(iconobtn);
                btnDeshabilitar.setText("DESHABILITAR");

            } else if (btnDeshabilitar.getText().equals("DESHABILITAR")) {
                ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoPregunta.png");
                int ventanaConfirmacion = JOptionPane.showConfirmDialog(null, "¿Seguro que deseas deshabilitar este usuario?", "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                if (ventanaConfirmacion == 0) {
                    try {
                        String sqlEstado = "UPDATE `usuarios` SET `Intentos` = ? WHERE `usuarios`.`IDUsuario` = ? ";
                        PreparedStatement pst = (PreparedStatement) cn.prepareStatement(sqlEstado);
                        pst.setString(1, deshabilitado);
                        pst.setString(2, id);
                        pst.execute();

                        ImageIcon jPanelIcon2 = new ImageIcon("src/iconos/iconoCorrecto.png");
                        JOptionPane.showMessageDialog(null, "El usuario " + usuario + " ha sido deshabilitado", "Confirmación", JOptionPane.PLAIN_MESSAGE, jPanelIcon2);
                        limpiarCajas();
                        cargarData();
                        bloquear();
                        btnNuevo.setEnabled(true);
                    } catch (Exception e) {
                        lo.LogBitacora("Hubo un error al intentar deshabilitar" + e);
                    }
                }
            } else if (btnDeshabilitar.getText().equals("HABILITAR")) {
                ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoPregunta.png");
                int ventanaConfirmacion = JOptionPane.showConfirmDialog(null, "¿Seguro que deseas habilitar este usuario?", "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                if (ventanaConfirmacion == 0) {
                    try {
                        String sqlEstado = "UPDATE `usuarios` SET `Intentos` = ? WHERE `usuarios`.`IDUsuario` = ? ";
                        PreparedStatement pst = (PreparedStatement) cn.prepareStatement(sqlEstado);
                        pst.setString(1, habilitado);
                        pst.setString(2, id);
                        pst.execute();

                        ImageIcon jPanelIcon2 = new ImageIcon("src/iconos/iconoCorrecto.png");
                        JOptionPane.showMessageDialog(null, "El usuario " + usuario + " ahora está habilitado", "Confirmación", JOptionPane.PLAIN_MESSAGE, jPanelIcon2);
                        limpiarCajas();
                        cargarData();
                        bloquear();
                        btnNuevo.setEnabled(true);
                    } catch (Exception e) {
                        lo.LogBitacora("Hubo un error al intentar habilitarlo" + e);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnDeshabilitarActionPerformed

    public String usuario;
    public int fila;

    void modificarRegistro() {
        if ("adminlectura".equals(txtusuario.getText())) {
            ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
            JOptionPane.showMessageDialog(null, "No tienes permisos para realizar esta accion", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
        }
        fila = tablaUsuarios.getSelectedRow();

        ImageIcon iconobtn = new ImageIcon("src/Iconos/iconoCancelar.png");
        btnDeshabilitar.setIcon(iconobtn);
        btnDeshabilitar.setText("CANCELAR");

        if (fila >= 0) {
            btnActualizar.setEnabled(true);
            btnDeshabilitar.setEnabled(true);
            btnNuevo.setEnabled(false);
            txtUsuario.setEnabled(true);
            txtContraseña.setEnabled(true);
            btnGuardar.setEnabled(false);

            String id = tablaUsuarios.getValueAt(fila, 0).toString();
            usuario = tablaUsuarios.getValueAt(fila, 1).toString();
            String contraseña = tablaUsuarios.getValueAt(fila, 2).toString();

            txtIDUsuario.setText(id);
            txtUsuario.setText(usuario);
            txtContraseña.setText(contraseña);

        } else {
            ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
        }
    }

    void contraseña() {
        if (!txtContraseña.getText().isEmpty()) {
            if (txtContraseña.getText().length() < 6) {
                ImageIcon jPanelIcono = new ImageIcon("src/Iconos/iconoError.png");
                JOptionPane.showMessageDialog(null, "La contraseña debe contener al menos 6 caracteres", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcono);
                txtContraseña.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 1));
                lbContraseñaX.setVisible(true);
            } else {
                txtContraseña.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
                lbContraseñaX.setVisible(false);
            }
        } else {
            txtContraseña.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
            lbContraseñaX.setVisible(false);
        }
    }

    private void modificarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarUsuarioActionPerformed
        if (!txtUsuario.getText().isEmpty() || !txtContraseña.getText().isEmpty()) {
            ImageIcon jPanelIcono = new ImageIcon("src/iconos/iconoPregunta.png");
            int decision = JOptionPane.showConfirmDialog(null, "Los datos aún no se han guardado y podrían perderse\n "
                    + "¿Seguro que desea entrar en modo edición?", "Confirmación", JOptionPane.YES_NO_OPTION,
                    JOptionPane.PLAIN_MESSAGE, jPanelIcono);
            if (decision == 0) {
                modificarRegistro();
            }
        } else {
            modificarRegistro();
        }
    }//GEN-LAST:event_modificarUsuarioActionPerformed

    public boolean validarUsuarios = false;

    public boolean usuarios() {
        Conexion cc = new Conexion();
        Connection cn = cc.GetConexion();
        String user = txtUsuario.getText();
        String sql = "SELECT Usuario FROM usuarios WHERE Usuario = '" + user + "'";

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                if (rs.getString("Usuario").equals(txtUsuario.getText())) {
                    ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
                    JOptionPane.showMessageDialog(null, "Este usuario ya existe, intenta con otro", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                    ImageIcon x = new ImageIcon("src/iconos/iconoX.png");
                    guardar = false;
                }
            } else {
                guardar = true;
                validarUsuarios = true;

            }
        } catch (Exception e) {
            lo.LogBitacora("No se pudo verificar" + e);
            ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
            JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
        }
        return validarUsuarios;
    }

    private void txtUsuarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsuarioFocusLost
        if (!txtUsuario.getText().isEmpty()) {
            if (!usuario.equals(txtUsuario.getText())) {
                String user = txtUsuario.getText();
                String sql = "SELECT Usuario FROM usuarios WHERE Usuario = '" + user + "'";

                try {
                    Statement st = cn.createStatement();
                    ResultSet rs = st.executeQuery(sql);

                    if (rs.next()) {
                        if (rs.getString("Usuario").equals(txtUsuario.getText())) {
                            ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
                            JOptionPane.showMessageDialog(null, "Este usuario ya existe, intenta con otro", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                            txtUsuario.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 1));
                            lbUsuarioX.setVisible(true);
                        }
                    } else {
                        txtUsuario.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
                        lbUsuarioX.setVisible(false);
                    }
                } catch (Exception e) {
                    lo.LogBitacora("No se pudo verificar" + e);
                    ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                    JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                }
            } else if (usuario.equals(null)) {
                String user = txtUsuario.getText();
                String sql = "SELECT Usuario FROM usuarios WHERE Usuario = '" + user + "'";

                try {
                    Statement st = cn.createStatement();
                    ResultSet rs = st.executeQuery(sql);

                    if (rs.next()) {
                        if (rs.getString("Usuario").equals(txtUsuario.getText())) {
                            ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
                            JOptionPane.showMessageDialog(null, "Este usuario ya existe, intenta con otro", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                            txtUsuario.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 1));
                            lbUsuarioX.setVisible(true);
                        }
                    } else {
                        txtUsuario.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
                        lbUsuarioX.setVisible(false);
                    }
                } catch (Exception e) {
                    lo.LogBitacora("No se pudo verificar" + e);
                    ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                    JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                }
            } else {
                txtUsuario.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
                lbUsuarioX.setVisible(false);
            }
        } else {
            txtUsuario.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
            lbUsuarioX.setVisible(false);
        }
    }//GEN-LAST:event_txtUsuarioFocusLost

    String secretKey = "lospibes";
    Encode encode = new Encode();
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        Conexion cn = new Conexion();
        Connection cc = cn.GetConexion();
        usuarios();
        contraseña();
        validarCamposVacios();
        if (!guardar == false) {
            String sql = "INSERT INTO usuarios (Usuario, Contrasena) VALUES (?,?)";

            try {
                PreparedStatement pst = cc.prepareStatement(sql);
                pst.setString(1, txtUsuario.getText());
                pst.setString(2, encode.ecnode(secretKey, txtContraseña.getText()));

                int i = pst.executeUpdate();
                if (i > 0) {
                    ImageIcon jPanelIcono = new ImageIcon("src/iconos/iconoCorrecto.png");
                    JOptionPane.showMessageDialog(null, "El registro se guardo correctamente", "Notificación", JOptionPane.PLAIN_MESSAGE, jPanelIcono);
                    limpiarCajas();
                    cargarData();
                    bloquear();
                    btnNuevo.setEnabled(true);
                }

            } catch (Exception e) {
                 lo.LogBitacora("Hubo un error al intentar guardar" + e);
                ImageIcon jPanelIcono = new ImageIcon("src/iconos/iconoError.png");
                JOptionPane.showMessageDialog(null, "Hubo un error al intentar guardar", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcono);
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        Conexion cn = new Conexion();
        Connection cc = cn.GetConexion();
        validarCamposVacios();
        if (!guardar == false) {
            String sql = "UPDATE usuarios SET Usuario = ?, Contrasena = ? WHERE IDUsuario = '" + txtIDUsuario.getText() + "'";

            try {
                PreparedStatement pst = cc.prepareStatement(sql);
                pst.setString(1, txtUsuario.getText());
                pst.setString(2, encode.ecnode(secretKey, txtContraseña.getText()));

                int i = pst.executeUpdate();
                if (i > 0) {
                    ImageIcon jPanelIcono = new ImageIcon("src/Iconos/iconoCorrecto.png");
                    JOptionPane.showMessageDialog(null, "El registro fue actualizado correctamente", "Notificación", JOptionPane.PLAIN_MESSAGE, jPanelIcono);

                    ImageIcon iconobtn = new ImageIcon("src/Iconos/iconoDeshabilitar.png");
                    btnDeshabilitar.setIcon(iconobtn);
                    btnDeshabilitar.setText("DESHABILITAR");
                    limpiarCajas();
                    cargarData();
                    bloquear();
                    btnNuevo.setEnabled(true);
                }

            } catch (Exception e) {
                 lo.LogBitacora("Hubo un error al intentar actualizar" + e);
                ImageIcon jPanelIcono = new ImageIcon("src/Iconos/iconoCorrecto.png");
                JOptionPane.showMessageDialog(null, "Hubo un error al intentar actualizar", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcono);
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        desbloquear();
        ImageIcon iconoBoton = new ImageIcon("src/iconos/iconoCancelar.png");
        btnDeshabilitar.setIcon(iconoBoton);
        btnDeshabilitar.setText("CANCELAR");
        btnNuevo.setEnabled(false);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void txtUsuarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsuarioFocusGained
        ImageIcon iconoBoton = new ImageIcon("src/iconos/iconoCancelar.png");
        btnDeshabilitar.setIcon(iconoBoton);
        btnDeshabilitar.setText("CANCELAR");
    }//GEN-LAST:event_txtUsuarioFocusGained

    private void txtContraseñaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtContraseñaFocusGained
        ImageIcon iconoBoton = new ImageIcon("src/iconos/iconoCancelar.png");
        btnDeshabilitar.setIcon(iconoBoton);
        btnDeshabilitar.setText("CANCELAR");
    }//GEN-LAST:event_txtContraseñaFocusGained

    private void txtContraseñaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtContraseñaFocusLost

    }//GEN-LAST:event_txtContraseñaFocusLost

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        try {
            Conexion cc = new Conexion();
            Connection cn = cc.GetConexion();

            JasperReport reporte = null;
            String path = "src\\Reportes\\reporteAdministradores.jasper";
            reporte = (JasperReport) JRLoader.loadObjectFromFile(path);
            JasperPrint jprint = JasperFillManager.fillReport(reporte, null, cn);
            JasperViewer view = new JasperViewer(jprint, false);
            view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            view.setVisible(true);

        } catch (JRException ex) {
            Logger.getLogger(panelVendedores.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnReporteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroAdministradores.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroAdministradores.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroAdministradores.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroAdministradores.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistroAdministradores().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojeru_san.complementos.RSButtonHover btnActualizar;
    private rojeru_san.complementos.RSButtonHover btnDeshabilitar;
    private rojeru_san.complementos.RSButtonHover btnGuardar;
    private rojeru_san.complementos.RSButtonHover btnNuevo;
    public static javax.swing.JLabel btnRegresar;
    private rojerusan.RSButtonHover btnReporte;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbContraseñaX;
    private javax.swing.JLabel lbFondo;
    private javax.swing.JLabel lbUsuarioX;
    private javax.swing.JLabel lbX;
    private javax.swing.JMenuItem modificarUsuario;
    private javax.swing.JTable tablaUsuarios;
    public javax.swing.JTextField txtContraseña;
    private javax.swing.JTextField txtIDUsuario;
    public javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
