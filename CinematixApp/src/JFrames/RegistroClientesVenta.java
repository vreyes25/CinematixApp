/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrames;

import Datos.Conexion;
import Paneles.panelInicio;
import Paneles.panelVendedores;
import encriptacion.Encode;
import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Los Pibes
 */
public class RegistroClientesVenta extends javax.swing.JFrame {

    /**
     * Creates new form RegistroAdministradores
     */
    public RegistroClientesVenta() {
        initComponents();
        setBackground(new Color(0, 0, 0, 0));
        cargarData();
        anchoColumnas();
        bloquear();
        cargarTipoDocumento();

        TextPrompt id = new TextPrompt("ID", txtIDCliente);
        TextPrompt nombre = new TextPrompt("NOMBRE", txtNombre);
        TextPrompt correo = new TextPrompt("CORREO", txtCorreo);
        TextPrompt numDocumento = new TextPrompt("# DOCUMENTO", txtNumDocu);

        txtIDCliente.setEnabled(false);
        lbNombreX.setVisible(false);
        lbCorreoX.setVisible(false);
        lbNumDocuX.setVisible(false);
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("imagenes/cinematixLogo.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        modificarCliente = new javax.swing.JMenuItem();
        AgregarCliente = new javax.swing.JMenuItem();
        btnRegresar = new javax.swing.JLabel();
        txtIDCliente = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        cbTipoDocu = new javax.swing.JComboBox<String>();
        txtNumDocu = new javax.swing.JTextField();
        lbX = new javax.swing.JLabel();
        btnNuevo = new rojeru_san.complementos.RSButtonHover();
        btnActualizar = new rojeru_san.complementos.RSButtonHover();
        btnDeshabilitar = new rojeru_san.complementos.RSButtonHover();
        btnGuardar = new rojeru_san.complementos.RSButtonHover();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        lbCorreoX = new javax.swing.JLabel();
        lbNumDocuX = new javax.swing.JLabel();
        lbNombreX = new javax.swing.JLabel();
        lbFondo = new javax.swing.JLabel();

        modificarCliente.setText("Modificar");
        modificarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarClienteActionPerformed(evt);
            }
        });
        jPopupMenu1.add(modificarCliente);

        AgregarCliente.setText("Agregar Cliente");
        AgregarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarClienteActionPerformed(evt);
            }
        });
        jPopupMenu1.add(AgregarCliente);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegresarMouseClicked(evt);
            }
        });
        getContentPane().add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 30, 30));

        txtIDCliente.setFont(new java.awt.Font("Garamond", 1, 16)); // NOI18N
        txtIDCliente.setForeground(new java.awt.Color(255, 255, 255));
        txtIDCliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIDCliente.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtIDCliente.setCaretColor(new java.awt.Color(255, 255, 255));
        txtIDCliente.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtIDCliente.setOpaque(false);
        txtIDCliente.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtIDCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 55, 40));

        txtNombre.setFont(new java.awt.Font("Garamond", 1, 16)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(255, 255, 255));
        txtNombre.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNombre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtNombre.setCaretColor(new java.awt.Color(255, 255, 255));
        txtNombre.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtNombre.setOpaque(false);
        txtNombre.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        txtNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNombreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreFocusLost(evt);
            }
        });
        getContentPane().add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 220, 40));

        txtCorreo.setFont(new java.awt.Font("Garamond", 1, 16)); // NOI18N
        txtCorreo.setForeground(new java.awt.Color(255, 255, 255));
        txtCorreo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCorreo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtCorreo.setCaretColor(new java.awt.Color(255, 255, 255));
        txtCorreo.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtCorreo.setOpaque(false);
        txtCorreo.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        txtCorreo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCorreoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCorreoFocusLost(evt);
            }
        });
        getContentPane().add(txtCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, 220, 40));

        cbTipoDocu.setFont(new java.awt.Font("Garamond", 1, 16)); // NOI18N
        getContentPane().add(cbTipoDocu, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, 220, 40));

        txtNumDocu.setFont(new java.awt.Font("Garamond", 1, 16)); // NOI18N
        txtNumDocu.setForeground(new java.awt.Color(255, 255, 255));
        txtNumDocu.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNumDocu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtNumDocu.setCaretColor(new java.awt.Color(255, 255, 255));
        txtNumDocu.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtNumDocu.setOpaque(false);
        txtNumDocu.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        txtNumDocu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumDocuFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumDocuFocusLost(evt);
            }
        });
        getContentPane().add(txtNumDocu, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 290, 220, 40));
        getContentPane().add(lbX, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 170, -1, 40));

        btnNuevo.setBackground(new java.awt.Color(81, 81, 81));
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoNuevo.png"))); // NOI18N
        btnNuevo.setText("NUEVO");
        btnNuevo.setBorderPainted(false);
        btnNuevo.setColorHover(new java.awt.Color(61, 61, 61));
        btnNuevo.setFocusPainted(false);
        btnNuevo.setFont(new java.awt.Font("Garamond", 0, 11)); // NOI18N
        btnNuevo.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 345, 140, 40));

        btnActualizar.setBackground(new java.awt.Color(81, 81, 81));
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoActualizar.png"))); // NOI18N
        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.setBorderPainted(false);
        btnActualizar.setColorHover(new java.awt.Color(61, 61, 61));
        btnActualizar.setFocusPainted(false);
        btnActualizar.setFont(new java.awt.Font("Garamond", 0, 11)); // NOI18N
        btnActualizar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 390, 140, 40));

        btnDeshabilitar.setBackground(new java.awt.Color(81, 81, 81));
        btnDeshabilitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoDeshabilitar.png"))); // NOI18N
        btnDeshabilitar.setText("DESHABILITAR");
        btnDeshabilitar.setBorderPainted(false);
        btnDeshabilitar.setColorHover(new java.awt.Color(61, 61, 61));
        btnDeshabilitar.setFocusPainted(false);
        btnDeshabilitar.setFont(new java.awt.Font("Garamond", 0, 11)); // NOI18N
        btnDeshabilitar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnDeshabilitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeshabilitarActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeshabilitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 390, 140, 40));

        btnGuardar.setBackground(new java.awt.Color(81, 81, 81));
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoGuardar.png"))); // NOI18N
        btnGuardar.setText("GUARDAR");
        btnGuardar.setBorderPainted(false);
        btnGuardar.setColorHover(new java.awt.Color(61, 61, 61));
        btnGuardar.setFocusPainted(false);
        btnGuardar.setFont(new java.awt.Font("Garamond", 0, 11)); // NOI18N
        btnGuardar.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 345, 140, 40));

        tablaClientes.setBackground(new java.awt.Color(61, 61, 61));
        tablaClientes.setFont(new java.awt.Font("Garamond", 1, 16)); // NOI18N
        tablaClientes.setForeground(new java.awt.Color(255, 255, 255));
        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        tablaClientes.setAlignmentY(4.0F);
        tablaClientes.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablaClientes.setComponentPopupMenu(jPopupMenu1);
        tablaClientes.setFillsViewportHeight(true);
        tablaClientes.setOpaque(false);
        tablaClientes.setPreferredSize(new java.awt.Dimension(300, 60));
        tablaClientes.setRowHeight(25);
        tablaClientes.setSelectionBackground(new java.awt.Color(29, 29, 29));
        tablaClientes.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tablaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaClientes);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 90, 430, 340));

        lbCorreoX.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoX.png"))); // NOI18N
        getContentPane().add(lbCorreoX, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 190, 30, 40));

        lbNumDocuX.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoX.png"))); // NOI18N
        getContentPane().add(lbNumDocuX, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 290, 30, 40));

        lbNombreX.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/iconoX.png"))); // NOI18N
        getContentPane().add(lbNombreX, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 140, 30, 40));

        lbFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/registroClientes.png"))); // NOI18N
        getContentPane().add(lbFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        for (double i = 0.0; i <= 1.0; i = i + 0.1) {
            String val = i + "";
            float f = Float.valueOf(val);
            this.setOpacity(f);
            try {
                Thread.sleep(50);
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_formWindowOpened

    boolean guardar;
    boolean aprobado;
    boolean probar;

    void validarCamposVacios() {
        ImageIcon jPaneIcon = new ImageIcon("src/Iconos/iconoError.png");
        if (txtNombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe rellenar el campo nombre", "Error", JOptionPane.PLAIN_MESSAGE, jPaneIcon);
        } else if (txtCorreo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe rellenar el campo correo", "Error", JOptionPane.PLAIN_MESSAGE, jPaneIcon);
        } else if (cbTipoDocu.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un tipo de documento", "Error", JOptionPane.PLAIN_MESSAGE, jPaneIcon);
        } else if (txtNumDocu.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe rellenar el campo número de documento", "Error", JOptionPane.PLAIN_MESSAGE, jPaneIcon);
        } else if (lbNombreX.isVisible() || lbCorreoX.isVisible() || lbNumDocuX.isVisible()) {
            JOptionPane.showMessageDialog(null, "Debe corregir los errores para poder continuar", "Error", JOptionPane.PLAIN_MESSAGE, jPaneIcon);
        } else {
            guardar = true;
        }
    }

    public void verificarCaracteresRepetidos(String cadena) {
        String patron = "^(\\d|(([A-Za-zñÑáéíóúÁÉÍÓÚ\\s])\\3?(?!\\3)))+$";
        Pattern patt = Pattern.compile(patron);
        Matcher comparador = patt.matcher(cadena);
        if (!comparador.matches()) {
            ImageIcon jPanelIcono = new ImageIcon("src/iconos/iconoAdvertencia.png");
            JOptionPane.showMessageDialog(null, "Tienes caracteres repetidos de forma incorrecta", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcono);
            aprobado = false;
        } else {
            aprobado = true;
        }
    }

    void validarCorreo(String cadena) {
        String patron = "^.+[@]{1}[a-z]+([.][a-z]+)+$";
        Pattern patt = Pattern.compile(patron);
        Matcher comparador = patt.matcher(cadena);
        if (!comparador.matches()) {
            aprobado = false;
        } else {
            aprobado = true;
        }
    }

    void ValidarNombre(String nombre) {
        String patron = "^([A-Z-ÁÉÍÓÚÑ]{1}[a-z-áéíóúñ]+[ ]*){2,4}$";
        Pattern patt = Pattern.compile(patron);
        Matcher comparador = patt.matcher(nombre);
        if (!comparador.matches()) {
            probar = false;
        } else {
            probar = true;
        }
    }

    public boolean pasaporte(String pasaporte) {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile("[A-Z-ÁÉÍÓÚÑ]{1}[0-9]{6}");
        m = p.matcher(pasaporte);

        if (m.find()) {
            return true;
        } else {
            return false;
        }
    }

    public boolean identidad(String identidad) {
        Pattern p = null;
        Matcher m = null;
        p = Pattern.compile("^[0-1]{1}[1-8]{1}[0-9]{2}[19|20]{2}[0-9]{7}");
        m = p.matcher(identidad);

        if (m.find()) {
            return true;
        } else {
            return false;
        }
    }

    void anchoColumnas() {
        TableColumnModel anchoColumnas = tablaClientes.getColumnModel();
        anchoColumnas.getColumn(0).setPreferredWidth(30);
        anchoColumnas.getColumn(1).setPreferredWidth(80);
        anchoColumnas.getColumn(2).setPreferredWidth(80);
        anchoColumnas.getColumn(3).setPreferredWidth(60);
        anchoColumnas.getColumn(4).setPreferredWidth(80);
        anchoColumnas.getColumn(5).setPreferredWidth(40);
    }

    void limpiarCajas() {
        txtIDCliente.setText("");
        txtNombre.setText("");
        txtCorreo.setText("");
        cbTipoDocu.setSelectedIndex(0);
        txtNumDocu.setText("");
        tablaClientes.clearSelection();
    }

    void bloquear() {
        txtNombre.setEnabled(false);
        txtCorreo.setEnabled(false);
        cbTipoDocu.setEnabled(false);
        txtNumDocu.setEnabled(false);
        btnGuardar.setEnabled(false);
        btnActualizar.setEnabled(false);
        btnDeshabilitar.setEnabled(false);
        tablaClientes.setEnabled(false);
    }

    void desbloquear() {
        txtNombre.setEnabled(true);
        txtCorreo.setEnabled(true);
        cbTipoDocu.setEnabled(true);
        txtNumDocu.setEnabled(true);
        btnGuardar.setEnabled(true);
        btnDeshabilitar.setEnabled(true);
        tablaClientes.setEnabled(true);
    }

    void cargarTipoDocumento() {
        String sql = "SELECT NombreDocumento FROM tipodocumento";

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            cbTipoDocu.addItem("SELECCIONE...");
            while (rs.next()) {
                cbTipoDocu.addItem(rs.getString("NombreDocumento").toUpperCase());
            }

        } catch (Exception e) {

        }
    }

    ResultSet rs;
    PreparedStatement Pst;
    DefaultTableModel model;
    Conexion cc = new Conexion();
    Connection cn = cc.GetConexion();

    void cargarData() {
        String[] titulos = {"ID", "Nombre", "Correo", "Tipo Documento", "Número Documento", "Estado"};
        String[] registros = new String[6];
        String sql = "SELECT C.IDCliente, C.Nombre, C.Correo, TD.NombreDocumento, C.NumeroDocumento, E.Estado\n"
                + "FROM cliente AS C INNER JOIN tipodocumento AS TD ON C.IDTipoDocumento = TD.IDTipoDocumento\n"
                + "INNER JOIN estados AS E ON C.IDEstado = E.IDEstado\n"
                + "WHERE C.IDCliente != 0 ORDER BY C.IDCliente";

        model = new DefaultTableModel(null, titulos);

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                registros[0] = rs.getString("C.IDCliente");
                registros[1] = rs.getString("C.Nombre");
                registros[2] = rs.getString("C.Correo");
                registros[3] = rs.getString("TD.NombreDocumento");
                registros[4] = rs.getString("C.NumeroDocumento");
                registros[5] = rs.getString("E.Estado");
                model.addRow(registros);
            }

            tablaClientes.setModel(model);
            anchoColumnas();
        } catch (SQLException ex) {
            Logger.getLogger(panelVendedores.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.getMessage());
        }
    }

    private void btnRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegresarMouseClicked
        if (!txtIDCliente.getText().isEmpty() || !txtNombre.getText().isEmpty() || !txtCorreo.getText().isEmpty() || cbTipoDocu.getSelectedIndex() != 0 || !txtNumDocu.getText().isEmpty()) {
            ImageIcon jPaneIcon = new ImageIcon("src/Iconos/iconoSalida.png");
            int salidaConfirmacion = JOptionPane.showConfirmDialog(null, "Al parecer tienes un proceso pendiente\n ¿Estás seguro que deseas salir?", "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, jPaneIcon);
            if (salidaConfirmacion == 0) {
                this.dispose();
                panelInicio.pantallaClientes = false;
            }
        } else {
            this.dispose();
            panelInicio.pantallaClientes = false;
        }
    }//GEN-LAST:event_btnRegresarMouseClicked

    private void tablaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaClientesMouseClicked
        int fila = tablaClientes.getSelectedRow();
        if (fila >= 0) {
            btnDeshabilitar.setEnabled(true);
            String estado = tablaClientes.getValueAt(fila, 5).toString();

            if ("3".equals(estado)) {
                ImageIcon iconobtn = new ImageIcon("src/Iconos/iconoDeshabilitar.png");
                btnDeshabilitar.setIcon(iconobtn);
                btnDeshabilitar.setText("DESHABILITAR");
            } else if ("0".equals(estado)) {
                ImageIcon iconobtn = new ImageIcon("src/Iconos/iconoHabilitar.png");
                btnDeshabilitar.setIcon(iconobtn);
                btnDeshabilitar.setText("HABILITAR");
            }
        }
    }//GEN-LAST:event_tablaClientesMouseClicked

    private void btnDeshabilitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeshabilitarActionPerformed
        int fila = tablaClientes.getSelectedRow();
        String habilitado = "1";
        String deshabilitado = "2";

        if (fila >= 0) {
            String id = tablaClientes.getValueAt(fila, 0).toString();
            String cliente = tablaClientes.getValueAt(fila, 1).toString();

            if (btnDeshabilitar.getText().equals("CANCELAR")) {
                limpiarCajas();
                btnActualizar.setEnabled(false);
                btnNuevo.setEnabled(false);
                btnDeshabilitar.setEnabled(false);
                btnGuardar.setEnabled(true);

                ImageIcon iconobtn = new ImageIcon("src/Iconos/iconoDeshabilitar.png");
                btnDeshabilitar.setIcon(iconobtn);
                btnDeshabilitar.setText("DESHABILITAR");

            } else if (btnDeshabilitar.getText().equals("DESHABILITAR")) {
                ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoPregunta.png");
                int ventanaConfirmacion = JOptionPane.showConfirmDialog(null, "¿Seguro que deseas deshabilitar este cliente?", "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                if (ventanaConfirmacion == 0) {
                    try {
                        String sqlEstado = "UPDATE `cliente` SET `IDEstado` = ? WHERE `cliente`.`IDCliente` = ? ";
                        PreparedStatement pst = (PreparedStatement) cn.prepareStatement(sqlEstado);
                        pst.setString(1, deshabilitado);
                        pst.setString(2, id);
                        pst.execute();

                        ImageIcon jPanelIcon2 = new ImageIcon("src/iconos/iconoCorrecto.png");
                        JOptionPane.showMessageDialog(null, "El cliente " + cliente + " ha sido deshabilitado", "Confirmación", JOptionPane.PLAIN_MESSAGE, jPanelIcon2);
                    } catch (Exception e) {

                    }
                }
            } else if (btnDeshabilitar.getText().equals("HABILITAR")) {
                ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoPregunta.png");
                int ventanaConfirmacion = JOptionPane.showConfirmDialog(null, "¿Seguro que deseas habilitar este cliente?", "Confirmación", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                if (ventanaConfirmacion == 0) {
                    try {
                        String sqlEstado = "UPDATE `cliente` SET `IDEstado` = ? WHERE `cliente`.`IDCliente` = ? ";
                        PreparedStatement pst = (PreparedStatement) cn.prepareStatement(sqlEstado);
                        pst.setString(1, habilitado);
                        pst.setString(2, id);
                        pst.execute();

                        ImageIcon jPanelIcon2 = new ImageIcon("src/iconos/iconoCorrecto.png");
                        JOptionPane.showMessageDialog(null, "El cliente " + cliente + " ahora está habilitado", "Confirmación", JOptionPane.PLAIN_MESSAGE, jPanelIcon2);
                    } catch (Exception e) {

                    }
                }
            }
        }
        limpiarCajas();
        cargarData();
        bloquear();
        btnNuevo.setEnabled(true);
    }//GEN-LAST:event_btnDeshabilitarActionPerformed

    void modificarRegistro() {
        int fila = tablaClientes.getSelectedRow();

        ImageIcon iconobtn = new ImageIcon("src/Iconos/iconoCancelar.png");
        btnDeshabilitar.setIcon(iconobtn);
        btnDeshabilitar.setText("CANCELAR");

        if (fila >= 0) {
            btnActualizar.setEnabled(true);
            btnDeshabilitar.setEnabled(true);
            btnNuevo.setEnabled(false);
            txtNombre.setEnabled(true);
            txtCorreo.setEnabled(true);
            btnGuardar.setEnabled(false);

            String id = tablaClientes.getValueAt(fila, 0).toString();
            String nombre = tablaClientes.getValueAt(fila, 1).toString();
            String correo = tablaClientes.getValueAt(fila, 2).toString();
            String idTipoDocumento = tablaClientes.getValueAt(fila, 3).toString();
            String numDocumento = tablaClientes.getValueAt(fila, 4).toString();

            txtIDCliente.setText(id);
            txtNombre.setText(nombre);
            txtCorreo.setText(correo);
            if (idTipoDocumento.contains("Identidad")) {
                cbTipoDocu.setSelectedIndex(1);
            } else if (idTipoDocumento.contains("Pasaporte")) {
                cbTipoDocu.setSelectedIndex(2);
            } else if (idTipoDocumento.contains("RTN")) {
                cbTipoDocu.setSelectedIndex(3);
            }
            txtNumDocu.setText(numDocumento);

        } else {
            ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
        }
    }

    private void modificarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarClienteActionPerformed
        if (!txtIDCliente.getText().isEmpty() || !txtNombre.getText().isEmpty() || !txtCorreo.getText().isEmpty() || cbTipoDocu.getSelectedIndex() != 0 || !txtNumDocu.getText().isEmpty()) {
            ImageIcon jPanelIcono = new ImageIcon("src/iconos/iconoPregunta.png");
            int decision = JOptionPane.showConfirmDialog(null, "Los datos aún no se han guardado y podrían perderse\n "
                    + "¿Seguro que desea entrar en modo edición?", "Confirmación", JOptionPane.YES_NO_OPTION,
                    JOptionPane.PLAIN_MESSAGE, jPanelIcono);
            if (decision == 0) {
                modificarRegistro();
            }
        } else {
            modificarRegistro();
        }
    }//GEN-LAST:event_modificarClienteActionPerformed

    void documento() {
        Conexion cc = new Conexion();
        Connection cn = cc.GetConexion();
        String cliente = txtNombre.getText();
        String sql = "SELECT IDTipoDocumento, NumeroDocumento FROM cliente WHERE Nombre = '" + cliente + "'";

        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                if (rs.getString("IDTipoDocumento").equals(cbTipoDocu.getSelectedIndex())) {
                    ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
                    JOptionPane.showMessageDialog(null, "Este usuario ya existe, intenta con otro", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                    ImageIcon x = new ImageIcon("src/iconos/iconoX.png");
                    guardar = false;
                }
            } else {
                guardar = true;
            }
        } catch (Exception e) {
            ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
            JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
        }
    }

    private void txtNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreFocusLost
        if (!txtNombre.getText().isEmpty()) {
            ValidarNombre(txtNombre.getText());
            if (probar != true) {
                ImageIcon jPanelIcono = new ImageIcon("src/iconos/iconoError.png");
                JOptionPane.showMessageDialog(null, "El nombre debe empezar con mayúscula y debe contener al menos un apellido", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcono);
                txtNombre.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 1));
                lbNombreX.setVisible(true);
            } else {
                txtNombre.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
                lbNombreX.setVisible(false);
            }

            Conexion cc = new Conexion();
            Connection cn = cc.GetConexion();
            String cliente = txtNombre.getText();
            String sql = "SELECT Nombre FROM cliente WHERE Nombre = '" + cliente + "'";

            try {
                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);

                if (rs.next()) {
                    if (rs.getString("Nombre").equals(txtNombre.getText())) {
                        ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
                        JOptionPane.showMessageDialog(null, "Este cliente ya existe, intenta con otro", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                        txtNombre.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 1));
                        lbNombreX.setVisible(true);

                    } else {
                        lbNombreX.setVisible(false);
                        txtNombre.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
                    }
                }
            } catch (Exception e) {
                ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
            }
        }
    }//GEN-LAST:event_txtNombreFocusLost

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        Conexion cn = new Conexion();
        Connection cc = cn.GetConexion();
        validarCamposVacios();
        if (!guardar == false) {
            String sql = "INSERT INTO cliente (Nombre, Correo, IDTipoDocumento, NumeroDocumento) VALUES (?,?,?,?)";

            try {
                PreparedStatement pst = cc.prepareStatement(sql);
                pst.setString(1, txtNombre.getText());
                pst.setString(2, txtCorreo.getText());
                pst.setString(3, String.valueOf(cbTipoDocu.getSelectedIndex()));
                pst.setString(4, txtNumDocu.getText());

                int i = pst.executeUpdate();
                if (i > 0) {
                    ImageIcon jPanelIcono = new ImageIcon("src/iconos/iconoCorrecto.png");
                    JOptionPane.showMessageDialog(null, "El registro se guardo correctamente", "Notificación", JOptionPane.PLAIN_MESSAGE, jPanelIcono);
                }

            } catch (Exception e) {
                ImageIcon jPanelIcono = new ImageIcon("src/iconos/iconoError.png");
                JOptionPane.showMessageDialog(null, "Hubo un error al intentar guardar", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcono);
                System.out.println(e.getMessage());
            }
        }
        limpiarCajas();
        cargarData();
        bloquear();
        btnNuevo.setEnabled(true);
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        Conexion cn = new Conexion();
        Connection cc = cn.GetConexion();
        validarCamposVacios();
        if (!guardar == false) {
            String sql = "UPDATE cliente SET Nombre = ?, Correo = ?, IDTipoDocumento = ?, NumeroDocumento = ? WHERE IDCliente = '" + txtIDCliente.getText() + "'";

            try {
                PreparedStatement pst = cc.prepareStatement(sql);
                pst.setString(1, txtNombre.getText());
                pst.setString(2, txtCorreo.getText());
                pst.setString(3, String.valueOf(cbTipoDocu.getSelectedIndex()));
                pst.setString(4, txtNumDocu.getText());

                int i = pst.executeUpdate();
                if (i > 0) {
                    ImageIcon jPanelIcono = new ImageIcon("src/Iconos/iconoCorrecto.png");
                    JOptionPane.showMessageDialog(null, "El registro fue actualizado correctamente", "Notificación", JOptionPane.PLAIN_MESSAGE, jPanelIcono);

                    ImageIcon iconobtn = new ImageIcon("src/Iconos/iconoDeshabilitar.png");
                    btnDeshabilitar.setIcon(iconobtn);
                    btnDeshabilitar.setText("DESHABILITAR");
                }

            } catch (Exception e) {
                ImageIcon jPanelIcono = new ImageIcon("src/Iconos/iconoCorrecto.png");
                JOptionPane.showMessageDialog(null, "Hubo un error al intentar actualizar", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcono);
                System.out.println(e.getMessage());
            }
        }
        limpiarCajas();
        cargarData();
        bloquear();
        btnNuevo.setEnabled(true);
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        desbloquear();
        ImageIcon iconoBoton = new ImageIcon("src/iconos/iconoCancelar.png");
        btnDeshabilitar.setIcon(iconoBoton);
        btnDeshabilitar.setText("CANCELAR");
        btnNuevo.setEnabled(false);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void txtNombreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreFocusGained
        ImageIcon iconoBoton = new ImageIcon("src/iconos/iconoCancelar.png");
        btnDeshabilitar.setIcon(iconoBoton);
        btnDeshabilitar.setText("CANCELAR");
    }//GEN-LAST:event_txtNombreFocusGained

    private void txtCorreoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCorreoFocusGained
        ImageIcon iconoBoton = new ImageIcon("src/iconos/iconoCancelar.png");
        btnDeshabilitar.setIcon(iconoBoton);
        btnDeshabilitar.setText("CANCELAR");
    }//GEN-LAST:event_txtCorreoFocusGained


    private void txtCorreoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCorreoFocusLost
        if (!txtCorreo.getText().isEmpty()) {
            validarCorreo(txtCorreo.getText());
            if (aprobado != true) {
                ImageIcon jPanelIcono = new ImageIcon("src/iconos/iconoError.png");
                JOptionPane.showMessageDialog(null, "Debes escribir un correo válido\nEjemplo: cinematix@gmail.com", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcono);
                txtCorreo.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 1));
                lbCorreoX.setVisible(true);
            } else {
                txtCorreo.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
                lbCorreoX.setVisible(false);
            }
        } else {
            txtCorreo.setBorder(BorderFactory.createLineBorder(Color.WHITE, 1));
            lbCorreoX.setVisible(false);
        }
    }//GEN-LAST:event_txtCorreoFocusLost

    private void txtNumDocuFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumDocuFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumDocuFocusGained

    private void txtNumDocuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumDocuFocusLost
        if (!txtNumDocu.getText().isEmpty()) {
            Conexion cc = new Conexion();
            Connection cn = cc.GetConexion();
            String numDocu = txtNumDocu.getText();
            String tipoDocu = String.valueOf(cbTipoDocu.getSelectedIndex());
            String sql = "SELECT IDTipoDocumento, NumeroDocumento FROM vendedor WHERE IDTipoDocumento = '" + tipoDocu + "' and NumeroDocumento = '" + numDocu + "'";

            if (cbTipoDocu.getSelectedIndex() == 1) {
                if (txtNumDocu.getText().length() < 13) {
                    ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                    JOptionPane.showMessageDialog(null, "El número de identidad debe contener 13 dígitos", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                    txtNumDocu.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 2));
                    lbNumDocuX.setVisible(true);
                } else if (!identidad(txtNumDocu.getText())) {
                    ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                    JOptionPane.showMessageDialog(null, "El número de identidad debe comenzar con dígitos del 01 al 18\nAsegurate de que el año sea correcto", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                    txtNumDocu.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 2));
                    lbNumDocuX.setVisible(true);
                } else {
                    txtNumDocu.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
                    lbNumDocuX.setVisible(false);
                    try {
                        Statement st = cn.createStatement();
                        ResultSet rs = st.executeQuery(sql);

                        if (rs.next()) {
                            if (rs.getString("IDTipoDocumento").equals(tipoDocu) && rs.getString("NumeroDocumento").equals(numDocu)) {
                                ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
                                JOptionPane.showMessageDialog(null, "Este número de identidad ya existe, intenta con otro", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                                txtNumDocu.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 2));
                                lbNumDocuX.setVisible(true);
                            } else {
                                txtNumDocu.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
                                lbNumDocuX.setVisible(false);
                            }

                        }
                    } catch (Exception e) {
                        ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                        JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                    }
                }
            }
            if (cbTipoDocu.getSelectedIndex() == 2) {
                if (txtNumDocu.getText().length() < 7) {
                    ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                    JOptionPane.showMessageDialog(null, "El código del pasaporte debe contener 7 digitos", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                    txtNumDocu.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 2));
                    lbNumDocuX.setVisible(true);
                } else if (!pasaporte(txtNumDocu.getText())) {
                    ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                    JOptionPane.showMessageDialog(null, "El código del pasaporte debe empezar con una letra mayúsucula seguido de 6 numeros", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                    txtNumDocu.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 2));
                    lbNumDocuX.setVisible(true);
                } else {
                    txtNumDocu.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
                    lbNumDocuX.setVisible(false);
                    try {
                        Statement st = cn.createStatement();
                        ResultSet rs = st.executeQuery(sql);

                        if (rs.next()) {
                            if (rs.getString("IDTipoDocumento").equals(tipoDocu) && rs.getString("NumeroDocumento").equals(numDocu)) {
                                ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
                                JOptionPane.showMessageDialog(null, "Este número de pasaporte ya existe, intenta con otro", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                                txtNumDocu.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 2));
                                lbNumDocuX.setVisible(true);
                            } else {
                                txtNumDocu.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
                                lbNumDocuX.setVisible(false);
                            }
                        }
                    } catch (Exception e) {
                        ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                        JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                    }
                }
            }
            if (cbTipoDocu.getSelectedIndex() == 3) {
                if (txtNumDocu.getText().length() < 14) {
                    ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                    JOptionPane.showMessageDialog(null, "El número del RTN debe contener 14 digitos", "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                    txtNumDocu.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 2));
                    lbNumDocuX.setVisible(true);
                } else {
                    txtNumDocu.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
                    lbNumDocuX.setVisible(false);
                    try {
                        Statement st = cn.createStatement();
                        ResultSet rs = st.executeQuery(sql);

                        if (rs.next()) {
                            if (rs.getString("IDTipoDocumento").equals(tipoDocu) && rs.getString("NumeroDocumento").equals(numDocu)) {
                                ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoAdvertencia.png");
                                JOptionPane.showMessageDialog(null, "Este número de RTN ya existe, intenta con otro", "Advertencia", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                                txtNumDocu.setBorder(BorderFactory.createLineBorder(new Color(176, 3, 3), 2));
                                lbNumDocuX.setVisible(true);
                            } else {
                                txtNumDocu.setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
                                lbNumDocuX.setVisible(false);
                            }
                        }
                    } catch (Exception e) {
                        ImageIcon jPanelIcon = new ImageIcon("src/iconos/iconoError.png");
                        JOptionPane.showMessageDialog(null, "No se pudo verificar\n" + e.getMessage(), "Error", JOptionPane.PLAIN_MESSAGE, jPanelIcon);
                    }
                }
            }
        }
    }//GEN-LAST:event_txtNumDocuFocusLost
    
    public static String idCliente;
    private void AgregarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarClienteActionPerformed
        int fila = tablaClientes.getSelectedRow();
        
        if (fila >= 0){
           idCliente = tablaClientes.getValueAt(fila, 0).toString();
           String nombreCliente = tablaClientes.getValueAt(fila, 1).toString();
           
           ConfirmarVenta.lbAgregarCliente.setText(nombreCliente);
           this.dispose();
        }
    }//GEN-LAST:event_AgregarClienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroClientesVenta.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroClientesVenta.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroClientesVenta.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroClientesVenta.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistroClientesVenta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AgregarCliente;
    private rojeru_san.complementos.RSButtonHover btnActualizar;
    private rojeru_san.complementos.RSButtonHover btnDeshabilitar;
    private rojeru_san.complementos.RSButtonHover btnGuardar;
    private rojeru_san.complementos.RSButtonHover btnNuevo;
    public static javax.swing.JLabel btnRegresar;
    private javax.swing.JComboBox<String> cbTipoDocu;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCorreoX;
    private javax.swing.JLabel lbFondo;
    private javax.swing.JLabel lbNombreX;
    private javax.swing.JLabel lbNumDocuX;
    private javax.swing.JLabel lbX;
    private javax.swing.JMenuItem modificarCliente;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtIDCliente;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumDocu;
    // End of variables declaration//GEN-END:variables
}
